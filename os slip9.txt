que1

#include <stdio.h>

#define MAX 20

int frames[MAX], ref[MAX], mem[MAX][MAX], faults, sp, m, n;

void accept()
{
    int i;

    printf("Enter no. of frames:");
    scanf("%d", &n);

    printf("Enter no. of references:");
    scanf("%d", &m);

    printf("Enter reference string:\n");
    for (i = 0; i < m; i++)
    {
        printf("[%d]=", i);
        scanf("%d", &ref[i]);
    }
}

void disp()
{
    int i, j;

    for (i = 0; i < m; i++)
        printf("=%d", ref[i]);
    printf("\n\n");

    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (mem[i][j])
                printf("=%d", mem[i][j]);
            else
                printf(" ");
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", faults);
}

int search(int pno)
{
    int i;
    for (i = 0; i < n; i++)
    {
        if (frames[i] == pno)
            return i;
    }
    return -1;
}

void fifo()
{
    int i, j;

    for (i = 0; i < m; i++)
    {
        if (search(ref[i]) == -1)
        {
            frames[sp] = ref[i];
            sp = (sp + 1) % n;
            faults++;
            for (j = 0; j < n; j++)
                mem[j][i] = frames[j];
        }
    }
}

int main()
{
    accept();
    fifo();
    disp();
    return 0;
}


----------------------------------------------------------------------------

que2

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>

int count_characters(char *filename) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File can't be opened\n");
        return -1;
    }
    int count = 0;
    char c;
    while ((c = fgetc(fp)) != EOF) {
        count++;
    }
    fclose(fp);
    return count;
}

int count_words(char *filename) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File can't be opened\n");
        return -1;
    }
    int count = 0;
    char word[1024];
    while (fscanf(fp, "%s", word) == 1) {
        count++;
    }
    fclose(fp);
    return count;
}

int count_lines(char *filename) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File can't be opened\n");
        return -1;
    }
    int count = 0;
    char c;
    while ((c = fgetc(fp)) != EOF) {
        if (c == '\n') {
            count++;
        }
    }
    fclose(fp);
    return count;
}

void execute_command(char *command, char **args) {
    pid_t pid = fork();
    if (pid == 0) {
        // Child process
        if (execvp(command, args) == -1) {
            perror("Error executing command");
        }
        exit(EXIT_FAILURE);
    } else if (pid < 0) {
        // Error forking
        perror("Error forking");
    } else {
        // Parent process
        wait(NULL);
    }
}

int main() {
    char line[1024];
    char *args[64];

    while (1) {
        printf("myshell$ ");
        fflush(stdout);
        if (!fgets(line, 1024, stdin)) break;

        // Remove newline character
        int length = strlen(line);
        if (line[length - 1] == '\n') line[length - 1] = '\0';

        // Tokenize the input
        int i = 0;
        args[i] = strtok(line, " ");
        while (args[i] != NULL) {
            args[++i] = strtok(NULL, " ");
        }

        if (strcmp(args[0], "count") == 0) {
            if (args[1] == NULL || args[2] == NULL) {
                printf("Invalid command. Usage: count [c/w/l] filename\n");
            } else if (strcmp(args[1], "c") == 0) {
                printf("Character count: %d\n", count_characters(args[2]));
            } else if (strcmp(args[1], "w") == 0) {
                printf("Word count: %d\n", count_words(args[2]));
            } else if (strcmp(args[1], "l") == 0) {
                printf("Line count: %d\n", count_lines(args[2]));
            } else {
                printf("Invalid option for count command\n");
            }
        } else {
            // Execute other commands
            execute_command(args[0], args);
        }
    }
    return 0;
}





How to use the code:
Compile the Program: Save the code in a file, for example, myshell.c. Compile it using a C compiler like GCC with the command gcc -o myshell myshell.c.

Run the Shell: After compiling, you can run the shell by typing ./myshell in the terminal.

Using the Toy Shell:

Normal commands: You can run standard commands like ls, pwd, etc., just like in any shell.
Custom commands:
count c filename: Counts and prints the number of characters in the specified file.
count w filename: Counts and prints the number of words in the specified file.
count l filename: Counts and prints the number of lines in the specified file.
Exit the Shell: You can exit the shell by pressing Ctrl+D or typing a usual shell exit command.